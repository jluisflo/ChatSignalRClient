{"version":3,"sources":["components/message-list.tsx","models/message.model.ts","models/user.model.ts","Chat.tsx","index.tsx"],"names":["MesageList","props","this","messages","setState","user","map","data","index","span","offset","name","author","style","background","borderRadius","margin","avatar","src","alt","content","message","Component","Message","User","Chat","useState","connection","setConnection","userName","setUserName","userData","setUserData","inputMessage","setInputMessage","setMessages","useEffect","connect","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","on","catch","error","console","log","sendMessage","a","invoke","configureUser","getAvatar","avatars","Math","round","random","length","value","placeholder","onChange","input","target","onClick","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e70a7b9b.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport { Comment, Avatar, Row, Col } from 'antd';\r\nimport { Message } from \"../models/message.model\";\r\nimport { User } from \"../models/user.model\";\r\n\r\nexport class MesageList extends Component {\r\n    props: { user: User, messages: Message[] };\r\n\r\n    constructor(props: { user: User, messages: Message[] }) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    componentDidUpdate(props: { user: User, messages: Message[] }) {\r\n        if (this.props.messages !== props.messages) {\r\n            this.setState({ user: props.user, messages: props.messages });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {this.props.messages.map((data, index) =>\r\n                    <Col key={index} span={13} offset={this.props.user.name === data.author ? 0 : 16}>\r\n                        <Comment\r\n                            style={{ background: this.props.user.name === data.author ? '#e3f2fd' : 'none', borderRadius: 15, margin: 10}}\r\n                            author={data.author}\r\n                            avatar={<Avatar src={data.avatar} alt={data.author} />}\r\n                            content={\r\n                                <p>\r\n                                    {data.message}\r\n                                </p>\r\n                            }\r\n                        />\r\n                    </Col>\r\n                )}\r\n            </Row>\r\n        );\r\n    }\r\n}","export class Message {\r\n  constructor(author: string, message: string, avatar: string) {\r\n    this.author = author;\r\n    this.message = message;\r\n    this.avatar = avatar;\r\n  }\r\n  author: string;\r\n  message: string;\r\n  avatar: string;\r\n}\r\n","export class User {\r\n    constructor(name: string, avatar: string) {\r\n        this.name = name;\r\n        this.avatar = avatar;\r\n    }\r\n    name: string;\r\n    avatar: string;\r\n}","import { HubConnection, HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { Button, Input, Card } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { MesageList } from \"./components/message-list\";\nimport { Message } from \"./models/message.model\";\nimport { User } from \"./models/user.model\";\n\nexport const Chat = () => {\n  const [connection, setConnection] = useState<null | HubConnection>(null);\n  const [userName, setUserName] = useState(\"\");\n  const [userData, setUserData] = useState<User>();\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([]);\n\n\n  useEffect(() => {\n    const connect = new HubConnectionBuilder()\n      .withUrl(\"https://localhost:7246/hub/chat\")\n      .withAutomaticReconnect()\n      .build();\n    setConnection(connect);\n  }, []);\n\n  useEffect(() => {\n    if (connection) {\n      connection\n        .start()\n        .then(() => {\n          connection.on(\"ReceiveMessage\", (data) =>\n            setMessages(messages => [...messages, new Message(data.author, data.message, data.avatar)])\n          );\n        })\n        .catch((error) => console.log(error));\n    }\n  }, [connection]);\n\n  const sendMessage = async () => {\n    if (connection) {\n      if (inputMessage !== \"\") {\n        let message = new Message(userData?.name ?? '', inputMessage, userData?.avatar ?? '');\n        await connection\n          .invoke(\"UserWrite\", message)\n          .catch(error => console.log(error));\n      }\n      setInputMessage('');\n    }\n  };\n\n  const configureUser = async () => {\n    if (userName !== \"\") {\n      if (connection) {\n        const avatar = getAvatar();\n        await connection\n          .invoke(\"UserConnected\", new Message(userName, '', avatar))\n          .catch((error) => console.log(error));\n\n        setUserData(new User(userName, avatar));\n      }\n    }\n  };\n\n  const getAvatar = () => {\n    const avatars = [\n      \"//joeschmoe.io/api/v1/jon\",\n      \"//joeschmoe.io/api/v1/jean\",\n      \"//joeschmoe.io/api/v1/joe\",\n      \"//joeschmoe.io/api/v1/jed\",\n      \"//joeschmoe.io/api/v1/jeane\",\n      \"//joeschmoe.io/api/v1/jordan\",\n      \"//joeschmoe.io/api/v1/jack\"\n    ];\n    return avatars[Math.round(Math.random() * (avatars.length - 0) + 0)];\n  }\n\n  if (!userData)\n    return (\n      <Card>\n        <h1>Enter your name: </h1>\n        <Input\n          value={userName}\n          onChange={(input) => {\n            setUserName(input.target.value);\n          }}\n        />\n        <br /><br />\n        <Button onClick={configureUser} type=\"primary\">\n          Save\n        </Button>\n      </Card>\n    );\n\n  return (\n    <>\n      <MesageList {...{ user: userData, messages: messages }}></MesageList>\n      <Card>\n        <Input\n          value={inputMessage}\n          placeholder='write your message'\n          onChange={(input) => setInputMessage(input.target.value)}\n        />\n        <br /><br />\n        <Button onClick={sendMessage} type=\"primary\">\n          Send\n        </Button>\n      </Card>\n    </>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css'\nimport { Chat } from './Chat';\nimport { Row, Col } from 'antd';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Row>\n      <Col span={12} offset={6}>\n        <Chat />\n      </Col>\n    </Row>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}